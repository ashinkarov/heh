; Here we demonstrate that it is possible to define flattening and reshape
; on infinite arrays.  The `flatten' function turns multi-dimensional array
; into a vector, assuming row-major order for the indexing.  The `reshape'
; function changes the shape of the array, where the new shape comes as
; a first argument.
; 
; Key helper functions to achieve flattening and reshaping are
; index-to-offset and offset-to-index:
;    `idx2off idx shp' takes a vlaid index within the shape
;        `shp' and returns the offset of the element at the position
;        `idx' in the flattening of the array of shape `shp'.
;
;    `off2idx off shp' takes an offset into a flattened vector of shape
;        `shp' and returns an index that this offset corresponds to in
;        the index space generated by `shp'.
;
; This allows one to verify a family of array equalities that involve
; reshaping.  For example:
;
;     reshape |a| (flatten a) == a


; FIXME We assume that all the reductions are happening left to right and here
;       this *is* important.

; Reverse a vector.
letrec reverse =
    \v.imap |v| {_(iv): v.[(|v|).[0] - iv.[0] - 1] in

; The number of elements in the flattening of the array `a'.
letrec count =
    \a. reduce (\x.\y.x*y) 1 (reverse |a|) in

; Take first `n' elements from the vector `v'.
letrec takeleft =
    \v.\n.imap [n] {_(iv): v.iv in

; Compute reverse product of the elements in vector `v'
; starting from the index k.  For example:
;
;     revprod [1,2,3,4] 2 = 4 * 3
;
; This is because starting from the index 2 we have "tail"
; [3,4], and its reverse multiplication is 4*3.
letrec revprod =
    \v.\k.letrec s = |v| in
          if k >= s.[0] then
              1
          else
              reduce (\x.\y.x*y) 1 (takeleft (reverse v) (s.[0] - k)) in

; Convert the offset `off' in the flattened array of shape `shp'
; back into the index.
letrec off2idx =
    \off.\shp. imap (|shp|) { _(iv): (off % (revprod shp iv.[0]))
                                     / (revprod shp (iv.[0]+1)) in

; Find the offset of the element at index `ifx' in the flattening
; of the array of shape `shp'.
letrec idx2off =
    \idx.\shp.
    letrec shp_times_idx
        = imap |shp| { _(iv): (revprod shp (iv.[0] +1)) * idx.iv
    in reduce (\x.\y.x+y) 0 shp_times_idx in

; Turn the array `a' into a vector.
letrec flatten = \a. imap [count a] { _(iv): a.(off2idx iv.[0] |a|) in

; Change the shape of `a' to `shp'.
letrec reshape =
    \shp.\a. imap shp { _(iv): (flatten a).[idx2off iv shp] in

;[takeleft (flatten (imap [2, omega] {_(iv): iv.[0]*omega + iv.[1])) 20]
;[revprod [1,2,3,4] 2]
[reshape [2,6] (letrec shp = [3,4] in imap shp {_(iv): idx2off iv shp) ]
